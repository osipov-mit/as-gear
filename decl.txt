
> transformer:build

[2K[1G[1myarn run v1.22.17[22m
[2K[1G[2m$ rm -rf dist && tsc[22m
[2K[1GDone in 0.63s.

 

 >  Lerna (powered by Nx)   Successfully ran target build for project transformer



> struct:"asbuild:debug"

[2K[1G[1myarn run v1.22.17[22m
[2K[1G[2m$ asc assembly/index.ts --target debug --transform ../../transformer/dist/transformer.js[22m
ae {
  start: 90,
  end: 1124,
  debugInfoRef: 0,
  source: <ref *1> Tn {
    kind: 0,
    range: ae { start: 0, end: 1147, debugInfoRef: 0, source: [Circular *1] },
    sourceKind: 0,
    normalizedPath: 'assembly/io.ts',
    text: "import { CodecClass, ScaleString, U8, Vec } from 'as-scale-codec/assembly';\n" +
      '\n' +
      '//@ts-ignore\n' +
      '@codec\n' +
      'class MyStruct extends CodecClass {\n' +
      '  field1: ScaleString | null;\n' +
      '  field2: Vec<U8> | null;\n' +
      '\n' +
      '  constructor(f1: ScaleString | null = null, f2: Vec<U8> | null = null) {\n' +
      '    super();\n' +
      '    this.field1 = f1;\n' +
      '    this.field2 = f2;\n' +
      '  }\n' +
      '\n' +
      '  // decode(value: Uint8Array): void {\n' +
      '  //   this.field1 = new ScaleString();\n' +
      '  //   this.field1.decode(value);\n' +
      '  //   this.field2 = new Vec<U8>();\n' +
      '  //   this.field2.decode(value.slice(this.field1.bytesLen));\n' +
      '  //   this._bytesLen = this.field1.bytesLen + this.field2.bytesLen;\n' +
      '  // }\n' +
      '\n' +
      '  encode(): Uint8Array {\n' +
      '    const field1Encoded = this.field1!.encode();\n' +
      '    const field2Encoded = this.field2!.encode();\n' +
      '    this._bytes = new Uint8Array(field1Encoded.byteLength + field2Encoded.byteLength);\n' +
      '    this._bytes.set(field1Encoded);\n' +
      '    this._bytes.set(field2Encoded, field1Encoded.byteLength);\n' +
      '    this._bytesLen = this._bytes.length;\n' +
      '    return this._bytes;\n' +
      '  }\n' +
      '\n' +
      '  static decode(value: Uint8Array): MyStruct {\n' +
      '    const result = new MyStruct();\n' +
      '    result.decode(value);\n' +
      '    return result;\n' +
      '  }\n' +
      '}\n' +
      '\n' +
      'export { MyStruct };\n',
    statements: [ [Sn], [In], [Za] ],
    debugInfoIndex: -1,
    exportPaths: null,
    lineCache: null,
    lineColumn: 1,
    internalPath: 'assembly/io',
    simplePath: 'io'
  }
}
[2K[1GDone in 0.98s.

 

 >  Lerna (powered by Nx)   Successfully ran target asbuild:debug for project struct


# @./wasm-proc --skip-stack-end build/struct.wasm
# @rm -f build/struct*.meta.wasm
# @ls -l build/struct*.wasm
